(module
  ;; Importações da API Wokwi
  (import "env" "malloc" (func $malloc (param i32) (result i32)))
  (import "wokwi" "pin_init" (func $pin_init (param i32 i32) (result i32)))
  (import "wokwi" "pin_dac_write" (func $pin_dac_write (param i32 f32)))
  (import "wokwi" "attr_init_float" (func $attr_init_float (param i32 f32) (result i32)))
  (import "wokwi" "attr_read_float" (func $attr_read_float (param i32) (result f32)))
  (import "wokwi" "timer_init" (func $timer_init (param i32) (result i32)))
  (import "wokwi" "timer_start" (func $timer_start (param i32 i32 i32)))

  ;; Memória e dados
  (memory (export "memory") 1)
  (data (i32.const 0) "OUT\00")
  (data (i32.const 16) "moisture\00")

  ;; Estado global do chip
  (global $chip_state (mut i32) (i32.const 0))

  ;; Função de inicialização do chip
  (func $chip_init (export "chip_init")
    ;; Aloca estrutura de estado
    (i32.const 8)  ;; tamanho da estrutura (2 i32s)
    (call $malloc)
    (global.set $chip_state)

    ;; Inicializa pino OUT como analógico
    (i32.const 0)  ;; string "OUT"
    (i32.const 1)  ;; ANALOG
    (call $pin_init)
    (global.get $chip_state)
    (i32.store)    ;; armazena pin_out no estado

    ;; Inicializa atributo de umidade
    (i32.const 16) ;; string "moisture"
    (f32.const 1.0)
    (call $attr_init_float)
    (global.get $chip_state)
    (i32.const 4)
    (i32.add)      ;; offset para moisture_attr
    (i32.store)    ;; armazena moisture_attr no estado

    ;; Configura timer
    (call $setup_timer)
  )

  ;; Função de evento do timer
  (func $chip_timer_event (export "chip_timer_event") (param i32)
    (local $moisture f32)
    
    ;; Lê valor do atributo
    (global.get $chip_state)
    (i32.const 4)
    (i32.add)
    (i32.load)     ;; carrega moisture_attr
    (call $attr_read_float)
    (local.set $moisture)
    
    ;; Escreve no pino DAC
    (global.get $chip_state)
    (i32.load)     ;; carrega pin_out
    (local.get $moisture)
    (call $pin_dac_write)
  )

  ;; Função auxiliar para configurar timer
  (func $setup_timer
    (i32.const 32) ;; endereço do callback
    (call $timer_init)
    (local.tee 0)
    (i32.const 1000) ;; intervalo
    (i32.const 1)    ;; repetir
    (call $timer_start)
  )
)
